/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kpack.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kpack.models.V1alpha2ImageSpecSourceBlob;
import io.kpack.models.V1alpha2ImageSpecSourceGit;
import io.kpack.models.V1alpha2ImageSpecSourceRegistry;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * V1alpha2ImageSpecSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen",
		date = "2023-03-27T06:32:24.214Z[Etc/UTC]")
public class V1alpha2ImageSpecSource {

	public static final String SERIALIZED_NAME_BLOB = "blob";

	@SerializedName(SERIALIZED_NAME_BLOB)
	private V1alpha2ImageSpecSourceBlob blob;

	public static final String SERIALIZED_NAME_GIT = "git";

	@SerializedName(SERIALIZED_NAME_GIT)
	private V1alpha2ImageSpecSourceGit git;

	public static final String SERIALIZED_NAME_REGISTRY = "registry";

	@SerializedName(SERIALIZED_NAME_REGISTRY)
	private V1alpha2ImageSpecSourceRegistry registry;

	public static final String SERIALIZED_NAME_SUB_PATH = "subPath";

	@SerializedName(SERIALIZED_NAME_SUB_PATH)
	private String subPath;

	public V1alpha2ImageSpecSource blob(V1alpha2ImageSpecSourceBlob blob) {

		this.blob = blob;
		return this;
	}

	/**
	 * Get blob
	 * @return blob
	 **/
	@javax.annotation.Nullable
	@ApiModelProperty(value = "")

	public V1alpha2ImageSpecSourceBlob getBlob() {
		return blob;
	}

	public void setBlob(V1alpha2ImageSpecSourceBlob blob) {
		this.blob = blob;
	}

	public V1alpha2ImageSpecSource git(V1alpha2ImageSpecSourceGit git) {

		this.git = git;
		return this;
	}

	/**
	 * Get git
	 * @return git
	 **/
	@javax.annotation.Nullable
	@ApiModelProperty(value = "")

	public V1alpha2ImageSpecSourceGit getGit() {
		return git;
	}

	public void setGit(V1alpha2ImageSpecSourceGit git) {
		this.git = git;
	}

	public V1alpha2ImageSpecSource registry(V1alpha2ImageSpecSourceRegistry registry) {

		this.registry = registry;
		return this;
	}

	/**
	 * Get registry
	 * @return registry
	 **/
	@javax.annotation.Nullable
	@ApiModelProperty(value = "")

	public V1alpha2ImageSpecSourceRegistry getRegistry() {
		return registry;
	}

	public void setRegistry(V1alpha2ImageSpecSourceRegistry registry) {
		this.registry = registry;
	}

	public V1alpha2ImageSpecSource subPath(String subPath) {

		this.subPath = subPath;
		return this;
	}

	/**
	 * Get subPath
	 * @return subPath
	 **/
	@javax.annotation.Nullable
	@ApiModelProperty(value = "")

	public String getSubPath() {
		return subPath;
	}

	public void setSubPath(String subPath) {
		this.subPath = subPath;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		V1alpha2ImageSpecSource v1alpha2ImageSpecSource = (V1alpha2ImageSpecSource) o;
		return Objects.equals(this.blob, v1alpha2ImageSpecSource.blob)
				&& Objects.equals(this.git, v1alpha2ImageSpecSource.git)
				&& Objects.equals(this.registry, v1alpha2ImageSpecSource.registry)
				&& Objects.equals(this.subPath, v1alpha2ImageSpecSource.subPath);
	}

	@Override
	public int hashCode() {
		return Objects.hash(blob, git, registry, subPath);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class V1alpha2ImageSpecSource {\n");
		sb.append("    blob: ").append(toIndentedString(blob)).append("\n");
		sb.append("    git: ").append(toIndentedString(git)).append("\n");
		sb.append("    registry: ").append(toIndentedString(registry)).append("\n");
		sb.append("    subPath: ").append(toIndentedString(subPath)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the
	 * first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
